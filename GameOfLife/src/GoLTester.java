import org.junit.Test;
import static org.junit.Assert.*;
public class GoLTester {
    @Test
     public void neighbors() {
        int[][] A = {
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0},
                {0, 1, 1, 1, 0},
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0}
        };
        int B = 2;

        TorusGameOfLife x = new TorusGameOfLife(A);
        assertEquals(B, x.neighbors(2, 2));
    }
    @Test
     public void neighbors2() {
        int[][] A = {
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 1, 1, 1, 0,},
                {0, 1, 1, 1, 0, 0,},
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 0, 0, 0, 0,}};
        int B = 4;

        TorusGameOfLife x = new TorusGameOfLife(A);
        assertEquals(B, x.neighbors(3, 3));
    }
    @Test
     public void neighbors3() {
        int[][] A = {
                {0, 0, 0, 0, 0, 0,},
                {0, 1, 1, 0, 0, 0,},
                {0, 1, 1, 0, 0, 0,},
                {0, 0, 0, 1, 1, 0,},
                {0, 0, 0, 1, 1, 0,},
                {0, 0, 0, 0, 0, 0,}
               };
        int B = 4;

        TorusGameOfLife x = new TorusGameOfLife(A);
        assertEquals(B, x.neighbors(2, 2));
    }
    @Test
    public void neighbors4() {
        int[][] A = {
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
                };
        int B = 3;

        GameOfLife x = new GameOfLife(A);
        assertEquals(B, x.neighbors(5, 3));
    }
    @Test
     public void neighbors5() {
        int[][] A = {
                {0, 0, 0, 1},
                {0, 0, 0, 0},
                {1, 1, 0, 1},
                {0, 0, 0, 0}};
        int B = 3;

        TorusGameOfLife x = new TorusGameOfLife(A);
        assertEquals(B, x.neighbors(3, 3 ));
    }

    // oneStep Tests
    //#1
    @Test
     public void oneStep() {
        int[][] A = {
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0},
                {0, 1, 1, 1, 0},
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0}
        };
        int[][] B = {
                {0, 0, 0, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 0, 0, 0}
        };
        TorusGameOfLife x= new TorusGameOfLife(A);
        x.oneStep();
        assertArrayEquals(B, x.getBoard());
    }
    @Test
    public void oneStep2() {
        int[][] A = {
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 1, 1, 1, 0,},
                {0, 1, 1, 1, 0, 0,},
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 0, 0, 0, 0,}
        };
        int[][] B = {
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 0, 1, 0, 0,},
                {0, 1, 0, 0, 1, 0,},
                {0, 1, 0, 0, 1, 0,},
                {0, 0, 1, 0, 0, 0,},
                {0, 0, 0, 0, 0, 0,}
        };
        TorusGameOfLife x = new TorusGameOfLife(A);
        x.oneStep();
        assertArrayEquals(B, x.getBoard());
         }
    @Test
    public void oneStep3() {
        int[][] A = {
                {0, 0, 0, 0, 0, 0,},
                {0, 1, 1, 0, 0, 0,},
                {0, 1, 1, 0, 0, 0,},
                {0, 0, 0, 1, 1, 0,},
                {0, 0, 0, 1, 1, 0,},
                {0, 0, 0, 0, 0, 0,}
        };
        int[][] B = {
                {0, 0, 0, 0, 0, 0,},
                {0, 1, 1, 0, 0, 0,},
                {0, 1, 0, 0, 0, 0,},
                {0, 0, 0, 0, 1, 0,},
                {0, 0, 0, 1, 1, 0,},
                {0, 0, 0, 0, 0, 0,}
        };
        TorusGameOfLife x = new TorusGameOfLife(A);
        x.oneStep();
        assertArrayEquals(B, x.getBoard());
    }
    @Test
     public void oneStep4() {
        int[][] A = {
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        };
        int[][] B = {
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        };
        TorusGameOfLife x = new TorusGameOfLife(A);
        x.oneStep();
        assertArrayEquals(B, x.getBoard());
    }
    @Test
    public void oneStep5() {
        int[][] A = {
                {0, 0, 0, 0, 0},
                {1, 1, 0, 0, 1},
                {1, 1, 0, 0, 1},
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0}
        };
        int[][] B = {
                {1, 0, 0, 0, 0},
                {0, 1, 0, 0, 1},
                {0, 1, 0, 0, 1},
                {1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0}
        };
        TorusGameOfLife x= new TorusGameOfLife(A);
        x.oneStep();
        assertArrayEquals(B, x.getBoard());
    }
    @Test
    public void evolution(){
        int[][] A ={
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0},
                {0, 1, 1, 1, 0},
                {0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0}};
        int [][] B ={
                {0, 0, 0, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 0, 0, 0}};
        TorusGameOfLife x = new TorusGameOfLife(A);
        x.evolution(5);
        assertArrayEquals(B,x.getBoard());
    }
    @Test
    public void evolution2(){
        int[][] A ={
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 1, 1, 1, 0,},
                {0, 1, 1, 1, 0, 0,},
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 0, 0, 0, 0,}
                };
        int [][] B ={
                {0, 0, 0, 0, 0, 0,},
                {0, 0, 0, 1, 0, 0,},
                {0, 1, 0, 0, 1, 0,},
                {0, 1, 0, 0, 1, 0,},
                {0, 0, 1, 0, 0, 0,},
                {0, 0, 0, 0, 0, 0,}

                };
        TorusGameOfLife x = new TorusGameOfLife(A);
        x.evolution(11);
        assertArrayEquals(B,x.getBoard());
    }
    @Test
    public void evolution3(){
        int[][] A = {
                {0, 0, 0, 0, 0, 0,},
                {0, 1, 1, 0, 0, 0,},
                {0, 1, 1, 0, 0, 0,},
                {0, 0, 0, 1, 1, 0,},
                {0, 0, 0, 1, 1, 0,},
                {0, 0, 0, 0, 0, 0,}
        };
        int[][] B = {
                {0, 0, 0, 0, 0, 0,},
                {0, 1, 1, 0, 0, 0,},
                {0, 1, 0, 0, 0, 0,},
                {0, 0, 0, 0, 1, 0,},
                {0, 0, 0, 1, 1, 0,},
                {0, 0, 0, 0, 0, 0,}

        };
        TorusGameOfLife x = new TorusGameOfLife(A);
        x.evolution(57);
        assertArrayEquals(B,x.getBoard());
    }
    @Test
    public void evolution4(){
        int[][] A = {
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        };
        int[][] B = {
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}


        };
        TorusGameOfLife x = new TorusGameOfLife(A);
        x.evolution(1);
        assertArrayEquals(B,x.getBoard());
    }
    @Test
    public void evolution5(){
        int[][] A ={
                {0, 0, 0, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 1, 0, 1, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 0, 0, 0}};
        int [][] B ={
                {0, 0, 0, 0, 0},
                {0, 0, 1, 0, 0},
                {0, 1, 0, 1, 0},
                {0, 0, 1, 0, 0},
                {0, 0, 0, 0, 0}};
        TorusGameOfLife x = new TorusGameOfLife(A);
        x.evolution(5);
        assertArrayEquals(B,x.getBoard());
    }

}


